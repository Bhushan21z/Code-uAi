{
    "login-page": {
      "title": "Login Page",
      "type": "frontend",
      "time": "60",
      "techStack": ["React"],
      "guthubLink": "https://github.com/Bhushan21z/problem-todo-list",
      "description": "Create a modern, responsive login and registration interface with client-side validation and interactive features. Also modify UI as shown in the preview.",
      "uiRequirements": [
        "Responsive design for mobile and desktop",
        "Smooth form transitions",
        "Error message animations",
        "Password strength indicator",
        "Show/hide password toggle"
      ],
      "difficulty": "Beginner",
      "functionalRequirements": [
        "Client-side email format validation",
        "Email must be a valid format",
        "Email cannot be empty",
        "Maximum 100 characters for email",
        "Password minimum 8 characters",
        "Password must contain at least one uppercase letter",
        "Password must contain at least one number",
        "Password must contain at least one special character",
        "Real-time password match validation",
        "Disabled submit button until all validations pass"
      ],
      "learningGoals": [
        "Implement form validation",
        "Create responsive design",
        "Handle user interaction states"
      ],
      "preview": "https://i.ibb.co/MDvnLvL/Screenshot-from-2024-12-15-20-55-26.png",
      "testCases": [
        {
          "scenario": "Valid login credentials",
          "expectedBehavior": "Successfully log in and redirect to dashboard"
        },
        {
          "scenario": "Invalid email format",
          "expectedBehavior": "Show specific email format error"
        },
        {
          "scenario": "Weak password",
          "expectedBehavior": "Display password strength warning"
        }
      ],
      "recommendedTechnologies": ["React"]
    },
    "todo-app": {
      "title": "Todo Application",
      "type": "frontend",
      "time": "60",
      "techStack": ["React"],
      "guthubLink": "https://github.com/Bhushan21z/problem-todo-list",
      "description": "Build a responsive todo app with CRUD operations. Users should be able to add, edit, delete, and mark tasks as completed.",
      "uiRequirements": [
        "Minimalistic UI",
        "Drag and drop functionality",
        "Dark mode support"
      ],
      "difficulty": "Intermediate",
      "functionalRequirements": [
        "Add new tasks",
        "Edit existing tasks",
        "Delete tasks",
        "Mark tasks as completed",
        "Persist tasks in local storage"
      ],
      "learningGoals": [
        "Manage application state with hooks",
        "Implement CRUD operations",
        "Work with local storage"
      ],
      "preview": "https://i.ibb.co/MDvnLvL/Screenshot-from-2024-12-15-20-55-26.png",
      "testCases": [
        {
          "scenario": "Adding a new task",
          "expectedBehavior": "Task appears in the list"
        },
        {
          "scenario": "Marking a task as completed",
          "expectedBehavior": "Task moves to the completed section"
        },
        {
          "scenario": "Deleting a task",
          "expectedBehavior": "Task is removed from the list"
        }
      ],
      "recommendedTechnologies": ["React", "Vue", "Angular"]
    },
    "weather-app": {
      "title": "Weather App",
      "type": "frontend",
      "time": "60",
      "techStack": ["React"],
      "guthubLink": "https://github.com/Bhushan21z/problem-todo-list",
      "description": "Create a real-time weather application that fetches weather data from an API and displays the current conditions based on user input.",
      "uiRequirements": [
        "Attractive weather-themed UI",
        "Loading animations",
        "Dark/light mode toggle"
      ],
      "difficulty": "Hard",
      "functionalRequirements": [
        "Fetch weather data using an API",
        "Display temperature, humidity, and wind speed",
        "Allow users to search by city",
        "Show an error message for invalid locations"
      ],
      "learningGoals": [
        "Consume REST APIs in React",
        "Handle asynchronous data fetching",
        "Implement error handling"
      ],
      "preview": "https://i.ibb.co/MDvnLvL/Screenshot-from-2024-12-15-20-55-26.png",
      "testCases": [
        {
          "scenario": "Searching for a valid city",
          "expectedBehavior": "Displays weather information"
        },
        {
          "scenario": "Entering an invalid city",
          "expectedBehavior": "Shows an error message"
        },
        {
          "scenario": "Refreshing the page",
          "expectedBehavior": "Last searched city remains in the input"
        }
      ],
      "recommendedTechnologies": ["React", "Vue"]
    },
    "express-api": {
      "title": "Express API - Build Basic Routes",
      "type": "backend",
      "time": "60",
      "techStack": ["Node.js", "Express"],
      "guthubLink": "https://github.com/Bhushan21z/problem-express-api",
      "description": "Create a simple Express API with basic GET and POST routes. The API should respond with appropriate JSON data based on requests.",
      "uiRequirements": [],
      "functionalRequirements": [
      "Implement a GET route at '/home' that returns a welcome message.",
      "Implement a GET route at '/users' that returns a list of users.",
      "Implement a POST route at '/users' that accepts JSON data and adds a user.",
      "Ensure the API validates the request body for the 'POST /users' route."
      ],
      "preview": "https://i.ibb.co/MDvnLvL/Screenshot-from-2024-12-15-20-55-26.png",
      "learningGoals": [
      "Learn how to create an Express server.",
      "Understand handling GET and POST requests.",
      "Learn basic request validation using Express."
      ],
      "difficulty": "Beginner",
      "testCases": [
      {
          "scenario": "Fetch the home route message",
          "method": "GET",
          "route": "/home",
          "requestBody": null,
          "expectedBehavior": "{ message: 'Welcome to Express API' }"
      },
      {
          "scenario": "Fetch users list",
          "method": "GET",
          "route": "/users",
          "requestBody": null,
          "expectedBehavior": "[]"
      },
      {
          "scenario": "Add a new user (valid data)",
          "method": "POST",
          "route": "/users",
          "requestBody": { "name": "John Doe", "age": 25 },
          "expectedBehavior": "{ success: true, user: { name: 'John Doe', age: 25 } }"
      },
      {
          "scenario": "Add a new user (missing name)",
          "method": "POST",
          "route": "/users",
          "requestBody": { "age": 30 },
          "expectedBehavior": "{ error: 'Name is required' } with status 400"
      },
      {
          "scenario": "Add a new user (invalid age type)",
          "method": "POST",
          "route": "/users",
          "requestBody": { "name": "Alice", "age": "twenty" },
          "expectedBehavior": "{ error: 'Age must be a number' } with status 400"
      }
      ],
      "recommendedTechnologies": ["Node.js", "Express"]
    }
  }
  